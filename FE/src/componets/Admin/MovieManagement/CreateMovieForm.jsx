import React from 'react';
import {
    Form,
    Input,
    Select,
    DatePicker,
    Button,
    Upload,
    message,
} from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import { uploadToCloudinary } from '../../../util/uploadToCloudinary.js';
import { createMovieApi } from '../../../util/api.js';

const { TextArea } = Input;
const { Option } = Select;

const genres = [
    { label: 'üêâ Tu Ti√™n', value: 'Tu Ti√™n' },
    { label: 'üëª D·ªã Gi·ªõi', value: 'D·ªã Gi·ªõi' },
    { label: 'üåÄ Chuy·ªÉn Sinh', value: 'Chuy·ªÉn Sinh' },
    { label: 'üëΩ Vi·ªÖn T∆∞·ªüng', value: 'Vi·ªÖn T∆∞·ªüng' },
    { label: 'üî´ H√†nh ƒê·ªông', value: 'H√†nh ƒê·ªông' },
    { label: 'üßë‚Äçü§ù‚Äçüßë T√¨nh Y√™u', value: 'T√¨nh Y√™u' },
    { label: 'üè´ H·ªçc ƒê∆∞·ªùng', value: 'H·ªçc ƒê∆∞·ªùng' },
    { label: 'üòà Kinh D·ªã', value: 'Kinh D·ªã' },
    { label: 'üèÑ‚Äç‚ôÇÔ∏è Th·ªÉ Thao', value: 'Th·ªÉ Thao' },
    { label: 'üïµÔ∏è‚Äç‚ôÇÔ∏è H√¨nh S·ª±', value: 'H√¨nh S·ª±' },
    { label: 'üê∑ Harem', value: 'Harem' },
];

const CreateMovieForm = ({ onSubmit }) => {
    const [form] = Form.useForm();

    const onFinish = async (values) => {
        try {
            let posterUrl = '';

            // Upload ·∫£nh n·∫øu c√≥
            console.log("Values t·ª´ form:", values); // Ki·ªÉm tra to√†n b·ªô values
            if (values.poster?.fileList && values.poster.fileList.length > 0) {
                const file = values.poster.fileList[0].originFileObj || values.poster.fileList[0];
                console.log("File ƒë∆∞·ª£c ch·ªçn:", file);
                if (file) {
                    posterUrl = await uploadToCloudinary(file);
                    console.log("Poster URL:", posterUrl);
                } else {
                    console.log("File kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ originFileObj");
                }
            } else {
                console.log("Kh√¥ng c√≥ file trong fileList");
            }

            const formatted = {
                title: values.title,
                originalTitle: values.originalTitle,
                country: values.country,
                releaseDate: values.releaseDate.toDate(), // ki·ªÉu Date
                genres: values.genres, // array
                description: values.description,
                poster: posterUrl, // link ·∫£nh ƒë√£ upload
            };

            const res = await createMovieApi(formatted);
            console.log('Phim ƒë√£ ƒë∆∞·ª£c t·∫°o:', res.data);

            message.success('T·∫°o phim th√†nh c√¥ng!');
            form.resetFields();
        } catch (error) {
            console.error('L·ªói khi t·∫°o phim:', error);
            message.error('T·∫°o phim th·∫•t b·∫°i!');
        }
    };

    return (
        <Form
            layout="vertical"
            form={form}
            onFinish={onFinish}
            style={{ padding: '60px' }}
            initialValues={{ country: 'Nh·∫≠t B·∫£n' }}
        >
            <Form.Item name="title" label="T√™n phim (Ti·∫øng Vi·ªát)" rules={[{ required: true }]}>
                <Input />
            </Form.Item>

            <Form.Item name="originalTitle" label="T√™n g·ªëc" rules={[{ required: true }]}>
                <Input />
            </Form.Item>

            <Form.Item name="country" label="Qu·ªëc gia" rules={[{ required: true }]}>
                <Select>
                    <Option value="Nh·∫≠t B·∫£n">Nh·∫≠t B·∫£n</Option>
                    <Option value="H√†n Qu·ªëc">H√†n Qu·ªëc</Option>
                    <Option value="Trung Qu·ªëc">Trung Qu·ªëc</Option>
                </Select>
            </Form.Item>

            <Form.Item name="releaseDate" label="Ng√†y ph√°t h√†nh" rules={[{ required: true }]}>
                <DatePicker style={{ width: '100%' }} />
            </Form.Item>

            <Form.Item name="genres" label="Th·ªÉ lo·∫°i" rules={[{ required: true }]}>
                <Select
                    mode="multiple"
                    allowClear
                    showSearch
                    optionLabelProp="label"
                    placeholder="Ch·ªçn th·ªÉ lo·∫°i"
                    filterOption={(input, option) =>
                        option.label.toLowerCase().includes(input.toLowerCase())
                    }
                >
                    {genres.map((genre) => (
                        <Option key={genre.value} value={genre.value} label={genre.label}>
                            {genre.label}
                        </Option>
                    ))}
                </Select>
            </Form.Item>

            <Form.Item name="description" label="M√¥ t·∫£" rules={[{ required: true }]}>
                <TextArea rows={4} />
            </Form.Item>

            <Form.Item name="poster" label="·∫¢nh poster" valuePropName="file">
                <Upload
                    name="poster"
                    listType="picture"
                    maxCount={1}
                    beforeUpload={() => false} // NgƒÉn upload t·ª± ƒë·ªông
                    customRequest={({ file, onSuccess }) => {
                        setTimeout(() => {
                            onSuccess("ok"); // Gi·∫£ l·∫≠p upload th√†nh c√¥ng
                        }, 0);
                    }}
                    onChange={(info) => {
                        console.log("File thay ƒë·ªïi:", info.file);
                        if (info.file.status === 'removed') {
                            console.log("File ƒë√£ b·ªã x√≥a");
                        }
                    }}
                >
                    <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh</Button>
                </Upload>
            </Form.Item>

            <Form.Item>
                <Button type="primary" htmlType="submit">
                    T·∫°o phim
                </Button>
            </Form.Item>
        </Form>
    );
};

export default CreateMovieForm;